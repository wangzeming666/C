C 语言没有指定同一运算符中多个操作数的计算顺序(&&、||、?:
和,运算符除外)
。例如,在形如
x = f() + g();
的语句中,f()可以在 g()之前计算,也可以在 g()之后计算。因此,如果函数 f 或 g 改变
了另一个函数所使用的变量,那么 x 的结果可能会依赖于这两个函数的计算顺序。为了保证
特定的计算顺序,可以把中间结果保存在临时变量中。


类似地,C 语言也没有指定函数各参数的求值顺序。因此,下列语句
printf("%d %d\n", ++n, power(2, n)); /* 错 */
在不同的编译器中可能会产生不同的结果,这取决于 n 的自增运算在 power 调用之前还是之
后执行。解决的办法是把该语句改写成下列形式:
++n;
printf("%d %d\n", n, power(2, n));


函数调用、嵌套赋值语句、自增与自减运算符都有可能产生“副作用”——在对表达式
求值的同时,修改了某些变量的值。在有副作用影响的表达式中,其执行结果同表达式中的
变量被修改的顺序之间存在着微妙的依赖关系,下列语句就是一个典型的令人不愉快的情况:
a[i] = i++;
问题是:数组下标 i 是引用旧值还是引用新值?对这种情况编译器的解释可能不同,并因此
产生不同的结果。 C 语言标准对大多数这类问题有意未作具体规定。表达式何时会产生这种副
作用(对变量赋值)
,将由编译器决定, 因为最佳的求值顺序同机器结构有很大关系。
(ANSI C
标准明确规定了所有对参数的副作用都必须在函数调用之前生效, 但这对前面介绍的 printf
函数调用没有什么帮助。
)
