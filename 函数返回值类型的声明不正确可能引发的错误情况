声明语句  double sum, atof(char []);
表明 sum 是一个 double 类型的变量,atof 函数带有个 char[]类型的参数,且返回一个
double 类型的值。
函数 atof 的声明与定义必须一致。 如果 atof 函数与调用它的主函数 main 放在同一源
文件中, 并且类型不一致,编译器就会检测到该错误。 但是, 如果 atof 函数是单独编译的 (这
种可能性更大)
,这种不匹配的错误就无法检测出来,atof 函数将返回 double 类型的值,
而 main 函数却将返回值按照 int 类型处理,最后的结果值毫无意义。
根据前面有关函数的声明如何与定义保持一致的讨论,发生不匹配现象似乎很令人吃惊。
其中的一个原因是,如果没有函数原型,则函数将在第一次出现的表达式中被隐式声明,例
如:
sum += atof(line)
如果先前没有声明过的一个名字出现在某个表达式中,并且其后紧跟一个左圆括号,那么上
下文就会认为该名字是一个函数名字,该函数的返回值将被假定为 int 类型,但上下文并不
对其参数作任何假设。并且,如果函数声明中不包含参数,例如:
double atof();
那么编译程序也不会对函数 atof 的参数作任何假设, 并会关闭所有的参数检查。 对空参数表
的这种特殊处理是为了使新的编译器能编译比较老的 C 语言程序。不过,在新编写的程序中
这么做是不提倡的。如果函数带有参数,则要声明它们;如果没有参数,则使用 void 进行声
明。
在正确进行声明的函数 atof 的基础上,我们可以利用它编写出函数 atoi(将字符串转
换为 int 类型):

/* atoi: convert string s to integer using atof */
int atoi(char s[])
{
  double atof(char s[]);
  return (int) atof(s);
}

请注意其中的声明和 return 语句的结构。在下列形式的 return 语句中:
return(表达式);
其中,表达式的值在返回之前将被转换为函数的类型。因为函数 atoi 的返回值为 int 类型,
所以,return 语句中的 atof 函数的 double 类型值将被自动转换为 int 类型值。但是,
这种操作可能会丢失信息,某些编译器可能会对此给出警告信息。在该函数中,由于采用了
类型转换的方法显式表明了所要执行的转换操作,因此可以防止有关的警告信息。
