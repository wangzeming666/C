假如有下面两个定义:
int a[10][20];
int *b[10];
那么,从语法角度讲,a[3][4]和 b[3][4]都是对一个 int 对象的合法引用。但 a 是一个
真正的二维数组,它分配了 200 个 int 类型长度的存储空间,并且通过常规的矩阵下标计算
公式 20×row+col(其中,row 表示行,col 表示列)计算得到元素 a[row][col]的位置。但是,
对 b 来说,该定义仅仅分配了 10 个指针,并且没有对它们初始化,它们的初始化必须以显式
的方式进行,比如静态初始化或通过代码初始化。假定 b 的每个元素都指向一个具有 20 个元
素的数组, 那么编译器就要为它分配 200 个 int 类型长度的存储空间以及 10 个指针的存储空
间。指针数组的一个重要优点在于,数组的每一行长度可以不同,也就是说,b 的每个元素不
必都指向一个具有 20 个元素的向量,某些元素可以指向具有 2 个元素的向量,某些元素可以
指向具有 50 个元素的向量,而某些元素可以不指向任何向量。


指针数组和多维数组声明结果的不同之处，可用图像表示，这里图片不好放，放个链接，里面有
https://blog.csdn.net/ruiyelp/article/details/52529701
